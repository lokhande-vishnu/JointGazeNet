name: "JointGazeNet"
layer {
  name: "s"
  type: "HDF5Data"
  top: "source_data"
  top: "lp_labels"
  hdf5_data_param {
    source: "./models/DAN/jointGazeNet/source.txt"
    batch_size: 200
  }
  include: { phase: TRAIN }
}

layer {
  name: "tl"
  type: "HDF5Data"
  top: "target_data_wlabels"
  top: "target_labels_wlabels"
  hdf5_data_param {
    source: "./models/DAN/jointGazeNet/target_labels.txt"
    batch_size: 50 # change here if changing dataset size
  }
  include: { phase: TRAIN }
}

layer {
  name: "tnl"
  type: "HDF5Data"
  top: "target_data_nlabels"
  top: "target_labels_nlabels"
  hdf5_data_param {
    source: "./models/DAN/jointGazeNet/target_nolabels.txt"
    batch_size: 200 # change here if changing dataset size
  }
  include: { phase: TRAIN }
}

layer {
  name: "target_label_silence"
  type: "Silence"
  bottom: "target_labels_nlabels"
  include: { phase: TRAIN}
}

layer {
  name: "concat_data"
  type: "Concat"
  bottom: "source_data"
  bottom: "target_data_wlabels"
  bottom: "target_data_nlabels"	
  top: "data"
  concat_param {
    concat_dim: 0
  }
  include: { phase: TRAIN }
}

layer {
  name: "concat_target_data"
  type: "Concat"
  bottom: "target_data_wlabels"
  bottom: "target_data_nlabels"
  top: "target_data"
  concat_param {
    concat_dim: 0
  }
  include: { phase: TRAIN }
}


layer {
  name: "target_test"
  type: "HDF5Data"
  top: "data"
  top: "lp_labels"
  hdf5_data_param {
    source: "./models/DAN/jointGazeNet/test_list_transfer.txt"
    batch_size: 100
  }
  include: { phase: TEST }
}

layer {
  name: "target_data_rename"
  type: "Split"
  bottom: "data"
  top: "target_data"
  include: { phase: TEST }
}

######################## Private source encoder -- start ###########################
layer {
  name: "pv_source_conv1"
  type: "Convolution"
  bottom: "source_data"
  top: "pv_source_conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
  include: { phase: TRAIN }	
}

layer {
  name: "pv_source_pool1"
  type: "Pooling"
  bottom: "pv_source_conv1"
  top: "pv_source_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
  include: { phase: TRAIN }		
}

layer {
  name: "pv_source_conv2"
  type: "Convolution"
  bottom: "pv_source_pool1"
  top: "pv_source_conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
  include: { phase: TRAIN }		
}

layer {
  name: "pv_source_pool2"
  type: "Pooling"
  bottom: "pv_source_conv2"
  top: "pv_source_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
  include: { phase: TRAIN }		
}

layer {
  name: "pv_source_ip1"
  type: "InnerProduct"
  bottom: "pv_source_pool2"
  top: "pv_source_ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  include: { phase: TRAIN }		
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pv_source_ip1"
  top: "pv_source_features"
  include: { phase: TRAIN }		
}
######################## Private source encoder -- end ###########################

######################## Private target encoder -- start ###########################
layer {
  name: "pv_target_conv1"
  type: "Convolution"
  bottom: "target_data"
  top: "pv_target_conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pv_target_pool1"
  type: "Pooling"
  bottom: "pv_target_conv1"
  top: "pv_target_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "pv_target_conv2"
  type: "Convolution"
  bottom: "pv_target_pool1"
  top: "pv_target_conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pv_target_pool2"
  type: "Pooling"
  bottom: "pv_target_conv2"
  top: "pv_target_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "pv_target_ip1"
  type: "InnerProduct"
  bottom: "pv_target_pool2"
  top: "pv_target_ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pv_target_relu1"
  type: "ReLU"
  bottom: "pv_target_ip1"
  top: "pv_target_features"
}
######################## Private target encoder -- end ###########################

########################## Shared encoder -- Start  ##########################
# input - data (TRAIN and TEST)
# ouput - ip1 (TRAIN and TEST)
###################################################################
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
########################## Shared encoder -- end  ########################## 

layer {
  name: "slice_features_fc7"
  type: "Slice"
  bottom: "ip1"
  top: "s_fc7"
  top: "tl_fc7"
  top: "tnl_fc7"
  slice_param {
    axis: 0
    slice_point:200 # change here if changing dataset size
    slice_point:250 # change here if changing dataset size
  }
  include: { phase: TRAIN }
}

layer {
  name: "fc7_alias"
  type: "Split"
  bottom: "ip1"
  top: "t_fc7"
  include: { phase: TEST }
}

layer {
  name: "concat_target_fc7"
  type: "Concat"
  bottom: "tl_fc7"
  bottom: "tnl_fc7"
  top: "t_fc7"
  concat_param {
      axis: 0
  }
  include: { phase: TRAIN }
}


########################## Prediction Network1: Source Start  ########################## 
layer {
  name: "fc8_source"
  type: "InnerProduct"
  bottom: "s_fc7"
  top: "s_fc8"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include: { phase: TRAIN }
}
########################## Prediction Network1: Source End  ########################## 

########################## Prediction Network2: Target Start  ########################## 
layer {
  name: "fc8_target"
  type: "InnerProduct"
  bottom: "t_fc7"
  top: "t_fc8"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

########################## Prediction Network2: Target End  ########################## 
layer {
  name: "slice_features_target_fc8"
  type: "Slice"
  bottom: "t_fc8"
  top: "tl_fc8"
  top: "tnl_fc8"
  slice_param {
    axis: 0
    slice_point:50  # change here if changing dataset size
  }
  include: { phase: TRAIN }
}

layer {
  name: "loss_regression_s"
  type: "EuclideanGazeLoss"
  bottom: "s_fc8"
  bottom: "lp_labels"
  top: "loss_s"
  include: { phase: TRAIN}
}

layer {
  name: "loss_regression_tl"
  type: "EuclideanGazeLoss"
  bottom: "tl_fc8"
  bottom: "target_labels_wlabels"
  top: "loss_tl"
  include: { phase: TRAIN}	
}

layer {
  name: "mmd_loss_fc7"
  type: "MMDLoss"
  bottom: "s_fc7"
  bottom: "t_fc7"
  top: "fc7_mmd_loss"
  loss_weight: 0.00001
  mmd_param {
    kernel_num: 5
    kernel_mul: 2.0
    fix_gamma: false
  }
  include: { phase: TRAIN }
}

layer {
  name: "mmd_loss_fc8"
  type: "MMDLoss"
  bottom: "s_fc8"
  bottom: "t_fc8"
  top: "fc8_mmd_loss"
  loss_weight: 0.01
  mmd_param {
    kernel_num: 2
    kernel_mul: 2.0
    fix_gamma: false
  }
  include: { phase: TRAIN }
}

layer {
  name: "diff_loss_source"
  type: "DiffLoss"
  bottom: "s_fc7"
  bottom: "pv_source_features"
  top: "diff_loss_source"
  loss_weight: 0.01
  include: { phase: TRAIN }
}

layer {
  name: "diff_loss_target"
  type: "DiffLoss"
  bottom: "t_fc7"
  bottom: "pv_target_features"
  top: "diff_loss_target"
  loss_weight: 0.01
  include: { phase: TRAIN }
}

layer {
  name: "slice_features_target_fc8"
  type: "Slice"
  bottom: "pv_target_features"
  top: "pv_target_features_wlabels"
  top: "pv_target_features_nlabels"
  slice_param {
    axis: 0
    slice_point:50  # change here if changing dataset size
  }
  include: { phase: TRAIN }
}

layer {
  name: "pv_target_features_rename"
  type: "Split"
  bottom: "pv_target_features"
  top: "pv_target_features_wlabels"
  include: { phase: TEST }
}

######################## Residual start ###########################

layer {
  name: "res_desired"
  type: "Eltwise"		
  bottom: "tl_fc8"
  bottom: "target_labels_wlabels"
  top: "res_desired"
  eltwise_param {
  	operation: SUM
	coeff: 1
	coeff: -1
  }
  include: { phase: TRAIN }
}

layer {
  name: "res_prediction"
  type: "InnerProduct"
  bottom: "pv_target_features_wlabels"
  top: "res_prediction"
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "res_loss"
  type: "EuclideanLoss"
  bottom: "res_prediction"
  bottom: "res_desired"
  top: "res_loss"
  include: { phase: TRAIN }	
}

layer {
  name: "target_label_prediction"
  type: "Eltwise"		
  bottom: "t_fc8"
  bottom: "res_prediction"
  top: "target_label_prediction"
  eltwise_param {
  	operation: SUM
	coeff: 1
	coeff: -1
  }
  include: { phase: TEST }
}
######################## Residual end ###########################

layer {
  name: "accuracy"
  type: "AccuracyGaze"
  bottom: "target_label_prediction"
  bottom: "lp_labels"
  top: "accuracy"
  include: { phase: TEST }
}

